; a2-signalling.asm
; CSC 230: Summer 2023
;
; Student name: Nadya Kievit
; Student ID: V00986238
; Date of completed work: 6/16/2023
;
; *******************************
; Code provided for Assignment #2
;
; Author: Mike Zastre (2022-Oct-15)
; Modified: Sudhakar Ganti (2023-May-31)
 
; This skeleton of an assembly-language program is provided to help you
; begin with the programming tasks for A#2. As with A#1, there are "DO
; NOT TOUCH" sections. You are *not* to modify the lines within these
; sections. The only exceptions are for specific changes changes
; announced on Brightspace or in written permission from the course
; instructor. *** Unapproved changes could result in incorrect code
; execution during assignment evaluation, along with an assignment grade
; of zero. ****

.include "m2560def.inc"
.cseg
.org 0

; ***************************************************
; **** BEGINNING OF FIRST "STUDENT CODE" SECTION ****
; ***************************************************

	; initializion code will need to appear in this
    ; section
	ldi r16,LOW(RAMEND)
	out SPL,r16
	ldi r16,HIGH(RAMEND)
	out SPH,r16
	clr r16




; ***************************************************
; **** END OF FIRST "STUDENT CODE" SECTION **********
; ***************************************************

; ---------------------------------------------------
; ---- TESTING SECTIONS OF THE CODE -----------------
; ---- TO BE USED AS FUNCTIONS ARE COMPLETED. -------
; ---------------------------------------------------
; ---- YOU CAN SELECT WHICH TEST IS INVOKED ---------
; ---- BY MODIFY THE rjmp INSTRUCTION BELOW. --------
; -----------------------------------------------------

	rjmp test_part_d
	; Test code


test_part_a:
	ldi r16, 0b00100001
	rcall configure_leds
	rcall delay_long

	clr r16
	rcall configure_leds
	rcall delay_long

	ldi r16, 0b00111000
	rcall configure_leds
	rcall delay_short

	clr r16
	rcall configure_leds
	rcall delay_long

	ldi r16, 0b00100001
	rcall configure_leds
	rcall delay_long

	clr r16
	rcall configure_leds

	rjmp end


test_part_b:
	ldi r17, 0b00101010
	rcall slow_leds
	ldi r17, 0b00010101
	rcall slow_leds
	ldi r17, 0b00101010
	rcall slow_leds
	ldi r17, 0b00010101
	rcall slow_leds

	rcall delay_long
	rcall delay_long

	ldi r17, 0b00101010
	rcall fast_leds
	ldi r17, 0b00010101
	rcall fast_leds
	ldi r17, 0b00101010
	rcall fast_leds
	ldi r17, 0b00010101
	rcall fast_leds
	ldi r17, 0b00101010
	rcall fast_leds
	ldi r17, 0b00010101
	rcall fast_leds
	ldi r17, 0b00101010
	rcall fast_leds
	ldi r17, 0b00010101
	rcall fast_leds

	rjmp end

test_part_c:
	ldi r16, 0b11111000
	push r16
	rcall leds_with_speed
	pop r16

	ldi r16, 0b11011100
	push r16
	rcall leds_with_speed
	pop r16

	ldi r20, 0b00100000
test_part_c_loop:
	push r20
	rcall leds_with_speed
	pop r20
	lsr r20
	brne test_part_c_loop

	rjmp end


test_part_d:
	ldi r21,'E'
	push r21
	rcall encode_letter
	pop r21
	push r25
	rcall leds_with_speed
	pop r25

	rcall delay_long

	ldi r21, 'A'
	push r21
	rcall encode_letter
	pop r21
	push r25
	rcall leds_with_speed
	pop r25

	rcall delay_long


	ldi r21, 'M'
	push r21
	rcall encode_letter
	pop r21
	push r25
	rcall leds_with_speed
	pop r25

	rcall delay_long

	ldi r21, 'H'
	push r21
	rcall encode_letter
	pop r21
	push r25
	rcall leds_with_speed
	pop r25

	rcall delay_long

	rjmp end


test_part_e:
	ldi r25, HIGH(WORD02 << 1)
	ldi r24, LOW(WORD02 << 1)
	rcall display_message_signal
	rjmp end

end:
    rjmp end






; ****************************************************
; **** BEGINNING OF SECOND "STUDENT CODE" SECTION ****
; ****************************************************

configure_leds:
	;turns on lights depending on r16
	;bits 5-0 control the lights 
	;bit 5 is the leftmost light
	;0b00000011 turns on the two leftmost leds (PORTB)
	
	;set PORTB and PORTL as output
	push r17
	push r16

	ldi r17, 0xFF
	sts DDRL, r17
	out DDRB, r17
	clr r17


	sbrc r16,0
	ori r17, 0b10000000
	sbrc r16,1
	ori r17, 0b00100000
	sbrc r16,2
	ori r17, 0b00001000
	sbrc r16,3
	ori r17, 0b00000010

	sts PORTL, r17
	clr r17

	out PORTB, r17

	sbrc r16,4
	sbi PORTB, 3
	sbrc r16,5
	sbi PORTB, 1

	pop r16
	pop r17


	ret


slow_leds:
	push r16
	push r17
	push r19
	;byte passed in r17
	;leave leds on for about 1 second

	;call configure_leds
	mov r16, r17 
	call configure_leds
	;call delay long
	call delay_long
	;turn off all leds
	ldi r19,0
	sts PORTL, r19
	out PORTB, r19

	;uses r16,r17,r19

	pop r19
	pop r17
	pop r16
	ret


fast_leds:
	push r16
	push r17
	push r19
	;byte passed in r17
	;leave leds on for about 1/4 of a second

	;call configure_leds
	mov r16, r17
	call configure_leds
	;call delay_short
	call delay_short
	;turn off all leds
	ldi r19, 0
	sts PORTL, r19
	out PORTB, r19

	pop r19
	pop r17
	pop r16
	ret


leds_with_speed:
	;one byte on the stack
	;top two digits set - one second speed
	;top two digits not set - 1/4 second speed
	push r17
	push r18
	push YH
	push YL


	in YH, SPH
	in YL, SPL
	ldd r17, Y+8
	ldi r18, 0b11000000 ;initialize mask
	and r18, r17
	cpi r18,0 ;if 18 is 0, 1/4 second speed
	breq call_slow
	call slow_leds ;1 second speed 

	call_slow:
		call fast_leds ;1/4 second speed

	pop YL
	pop YH
	pop r18
	pop r17
	ret


; Note -- this function will only ever be tested
; with upper-case letters, but it is a good idea
; to anticipate some errors when programming (i.e. by
; accidentally putting in lower-case letters). Therefore
; the loop does explicitly check if the hyphen/dash occurs,
; in which case it terminates with a code not found
; for any legal letter.

encode_letter: ;needs LOTSSSS of work
	;letter pushed onto the stack
	;take uppercase letter and convert to the right pattern
	;return value in r25
	;0 for off, for on, 00 in beginning - slow led, vice versa
	push r16
	push r17
	push r18
	push r19
	push r24
	push YH
	push YL
	push ZH
	push ZL

	clr r25
	ldi r24, 0b00100000
	ldi r19, 6 ;initialize counter

	in YH, SPH
	in YL, SPL
	ldd r16, Y+13 ;load the byte on the stack into r16
	
	ldi ZH, HIGH(PATTERNS << 1)
	ldi ZL, LOW(PATTERNS << 1)

	search_loop: ;searching for the correct letter
		lpm r17, Z+ ;letter in patterns loaded in r17
		cp r17, r16 ;check if the given letter is the same as the letter in PATTERNS
		breq found_match

		adiw Z, 7 
		rjmp search_loop

	found_match: ;r17 has the right letter
		lpm r17, Z+ ;r17 now has the encoded numbers
		ldi r18, '.'
		cpse r17, r18
		or r25,r24 ;store the digit into r25, skipped if equal to '.'
		lsr r24
		dec r19
		cpi r19,0
		brne found_match ;keep looping if r19 isn't 0 yet

	;the light on/off is finished (digits 0-5)
	;now we deal with the speed part
	lpm r17, Z
	ldi r19, 2 ;comparison
	cpse r19, r17 ;check if they're equal, if they are, 2, 1/4 second (slow)
	ori r25, 0b11000000 ;we know the speed is 1 second
	;uses r18, r24, r19, r17, r16

	pop ZL
	pop ZH
	pop YL
	pop YH
	pop r24
	pop r19
	pop r18
	pop r17
	pop r16

	ret


display_message_signal:
	;byte value in r24 and r25
	;access the word to be encoded
	;push the letter onto the stack and call encode_letter
	;call leds_with_speed with the value in r25
	push r18
	push ZH
	push ZL


	mov ZH, r25
	mov ZL, r24 ;load into Z

	loop_letter:
		lpm r18, Z+
		push r18
		rcall encode_letter
		pop r18
		push r25 
		rcall leds_with_speed
		pop r25

		call delay_short
		call delay_short

		cpi r18,0
		brne loop_letter


	pop ZL
	pop ZH
	pop r18

	ret


; ****************************************************
; **** END OF SECOND "STUDENT CODE" SECTION **********
; ****************************************************




; =============================================
; ==== BEGINNING OF "DO NOT TOUCH" SECTION ====
; =============================================

; about one second
delay_long:
	push r16

	ldi r16, 14
delay_long_loop:
	rcall delay
	dec r16
	brne delay_long_loop

	pop r16
	ret


; about 0.25 of a second
delay_short:
	push r16

	ldi r16, 4
delay_short_loop:
	rcall delay
	dec r16
	brne delay_short_loop

	pop r16
	ret

; When wanting about a 1/5th of a second delay, all other
; code must call this function
;
delay:
	rcall delay_busywait
	ret


; This function is ONLY called from "delay", and
; never directly from other code. Really this is
; nothing other than a specially-tuned triply-nested
; loop. It provides the delay it does by virtue of
; running on a mega2560 processor.
;
delay_busywait:
	push r16
	push r17
	push r18

	ldi r16, 0x08
delay_busywait_loop1:
	dec r16
	breq delay_busywait_exit

	ldi r17, 0xff
delay_busywait_loop2:
	dec r17
	breq delay_busywait_loop1

	ldi r18, 0xff
delay_busywait_loop3:
	dec r18
	breq delay_busywait_loop2
	rjmp delay_busywait_loop3

delay_busywait_exit:
	pop r18
	pop r17
	pop r16
	ret


; Some tables
;.cseg
;.org 0x800

PATTERNS:
	; LED pattern shown from left to right: "." means off, "o" means
    ; on, 1 means long/slow, while 2 means short/fast.
	.db "A", "..oo..", 1
	.db "B", ".o..o.", 2
	.db "C", "o.o...", 1
	.db "D", ".....o", 1
	.db "E", "oooooo", 1
	.db "F", ".oooo.", 2
	.db "G", "oo..oo", 2
	.db "H", "..oo..", 2
	.db "I", ".o..o.", 1
	.db "J", ".....o", 2
	.db "K", "....oo", 2
	.db "L", "o.o.o.", 1
	.db "M", "oooooo", 2
	.db "N", "oo....", 1
	.db "O", ".oooo.", 1
	.db "P", "o.oo.o", 1
	.db "Q", "o.oo.o", 2
	.db "R", "oo..oo", 1
	.db "S", "....oo", 1
	.db "T", "..oo..", 1
	.db "U", "o.....", 1
	.db "V", "o.o.o.", 2
	.db "W", "o.o...", 2
	.db "X", "oo....", 2
	.db "Y", "..oo..", 2
	.db "Z", "o.....", 2
	.db "-", "o...oo", 1   ; Just in case!

WORD00: .db "Welcome", 0
WORD01: .db "ALL", 0
WORD02: .db "ROADS", 0
WORD03: .db "LEAD", 0, 0
WORD04: .db "TO", 0, 0
WORD05: .db "ROME", 0, 0

; =======================================
; ==== END OF "DO NOT TOUCH" SECTION ====
; =======================================

